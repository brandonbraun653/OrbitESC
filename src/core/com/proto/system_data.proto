syntax = "proto2";
import "nanopb.proto";
import "serial_interface.proto";
import "motor_control.proto";

enum SystemDataId {
  SYS_DATA_INVALID = 0;     // Invalid data ID
  ADC_PHASE_CURRENTS = 1;   // ADC readings of the phase currents
  ADC_PHASE_VOLTAGES = 2;   // Voltage commands being sent to the motor
  ADC_SYSTEM_VOLTAGES = 3;  // Measurements of less-critical system voltages
  CURRENT_CONTROL_MONITOR = 4; // Current control monitor data
}

// Message type for announcing the current system tick
message SystemTickMessage {
  required Header header = 1;
  required uint32 tick = 2;   // System time in milliseconds
}

// Message type for streaming out console messages in real time
message ConsoleMessage {
  required Header header = 1;
  required uint32 this_frame = 2 [(nanopb).int_size = IS_8]; // Which frame is this?
  required uint32 total_frames = 3 [(nanopb).int_size = IS_8]; // How many frames are there?
  required bytes data = 4 [(nanopb).max_size = 128]; // Data payload
}

// Message type for announcing some device descriptions
message SystemInfoMessage {
  required Header header = 1;
  required uint32 systemTick = 2; // System time in milliseconds
  required string swVersion = 3 [(nanopb).max_size = 16, (nanopb).fixed_length = true]; // Software version
  required string description = 4 [(nanopb).max_size = 16, (nanopb).fixed_length = true]; // Device description
  required string serialNumber = 5 [(nanopb).max_size = 16, (nanopb).fixed_length = true]; // Serial number
}

// Message type for announcing the current system status
message SystemStatusMessage {
  required Header header = 1;
  required uint32 systemTick = 2; // System time in milliseconds
  required MotorCtrlState motorCtrlState = 3; // High level current motor control state
  // maybe something about error codes, etc.
}

// Message type for streaming out raw data from the system in real time
message SystemDataMessage {
  required Header header = 1;
  required SystemDataId id = 2 [(nanopb).int_size = IS_8]; // Which data stream is this?
  required uint32 timestamp = 3;  // System time of measurement in microseconds
  optional bytes payload = 4 [(nanopb).max_size = 80 ]; // Data payload

}
// Data payload type for SystemDataId::ADC_PHASE_CURRENTS
message ADCPhaseCurrentsPayload {
  required float ia = 1;          // Phase A current in Amps
  required float ib = 2;          // Phase B current in Amps
  required float ic = 3;          // Phase C current in Amps
}

// Data payload type for SystemDataId::PWM_COMMANDS
message ADCPhaseVoltagesPayload {
  required float va = 1;          // Phase A voltage command in Volts
  required float vb = 2;          // Phase B voltage command in Volts
  required float vc = 3;          // Phase C voltage command in Volts
}

// Data payload type for SystemDataId::ADC_SYSTEM_VOLTAGES
message ADCSystemVoltagesPayload {
  required float v_mcu = 1;       // Logic level supply voltage in Volts
  required float v_dc_link = 2;   // DC link voltage in Volts
  required float v_temp = 3;      // Temperature sensor voltage in Volts
  required float v_isense = 4;    // Current sense amplifier voltage reference in Volts
}

message CurrentControlMonitorPayload {
  required float ia = 1;      // Phase A current in Amps
  required float ib = 2;      // Phase B current in Amps
  required float ic = 3;      // Phase C current in Amps
  required float id_ref = 4;  // D-axis current reference in Amps
  required float iq_ref = 5;  // Q-axis current reference in Amps
  required float id = 6;      // D-axis actual current in Amps
  required float iq = 7;      // Q-axis actual current in Amps
  required float vd = 8;      // D-axis voltage command in Volts
  required float vq = 9;      // Q-axis voltage command in Volts
  required float va = 10;     // Voltage command for the Alpha axis in Volts
  required float vb = 11;     // Voltage command for the Beta axis in Volts
}
