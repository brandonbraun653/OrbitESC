syntax = "proto2";
import "nanopb.proto";

enum MsgId {
  MSG_ACK_NACK    = 0; // Generic ack/nack type message
  MSG_PING_CMD    = 1; // Simple PING to see if the node is alive
  MSG_TERMINAL    = 2; // Terminal command for printing text/debug data
  MSG_SYS_TICK    = 3; // System time tick
  MSG_SYS_INFO    = 4; // System information
  MSG_PARAM_IO    = 5; // Do operations on configurable parameters
  MSG_SYS_CTRL    = 6; // Perform system control operations
  MSG_SWITCH_MODE = 7; // Switch the boot mode of the device
}

enum SubId {
  option allow_alias = true;

  // Parameter IO messages
  SUB_MSG_PARAM_IO_GET  = 0;  // Retrieve the current value of a parameter
  SUB_MSG_PARAM_IO_SET  = 1;  // Commit a new value of a parameter
  SUB_MSG_PARAM_IO_SYNC = 2;  // Synchronize all parameters to disk
  SUB_MSG_PARAM_IO_LOAD = 3;  // Load all parameters from disk

  // System control messages
  SUB_MSG_SYS_CTRL_RESET = 0; // Reset the system
}

enum ParamId {
  // Housekeeping parameters
  PARAM_INVALID       = -1; // Invalid parameter

  // Read Only Parameters
  PARAM_BOOT_COUNT    = 0;  // Number of times the software has booted
  PARAM_HW_VERSION    = 1;  // Hardware version of the PCB
  PARAM_SW_VERSION    = 2;  // Software version of the firmware
  PARAM_DEVICE_ID     = 3;  // Factory programmed unique device ID
  PARAM_BOARD_NAME    = 4;  // Name of the board
  PARAM_DESCRIPTION   = 5;  // Description of the project

  // Read/Write Parameters
  PARAM_SERIAL_NUMBER       = 10; // Serial number of the device
  PARAM_DISK_UPDATE_RATE_MS = 11; // How often to write parameters to disk
  PARAM_ACTIVITY_LED_SCALER = 12; // Scale the activity LED blink rate
  PARAM_BOOT_MODE           = 13; // Boot mode of the device
}

enum ParamType {
  UNKNOWN  = 0;
  BOOL     = 1;
  UINT8    = 2;
  UINT16   = 3;
  UINT32   = 4;
  FLOAT    = 5;
  DOUBLE   = 6;
  BYTES    = 7;
  STRING   = 8;
}

enum StatusCode {
  NO_ERROR = 0;
  UNKNOWN_ERROR = 1;
  INVALID_PARAM = 2;
  INVALID_TYPE = 3;
  INVALID_VALUE = 4;
  REQUEST_FAILED = 5;
}

enum BootMode {
  BOOT_MODE_NORMAL = 0;
  BOOT_MODE_TEST = 1;
  BOOT_MODE_CONFIG = 2;
}

// Instrumentation message header common to all types. Each functional message type **must**
// have this first in their list of declarations.
message Header {
  required uint32 msgId = 1 [(nanopb).int_size = IS_8]; // Root message identifier
  required uint32 subId = 2 [(nanopb).int_size = IS_8]; // Possible sub-identifier to specify root ID details
  required uint32 uuid = 3 [(nanopb).int_size = IS_16]; // Unique ID for the message
}

// Root type that parsers can use to peek at messages
message BaseMessage {
  required Header header = 1;
}

// Generic ACK or NACK to a previous message
message AckNackMessage {
  required Header header = 1;
  required bool acknowledge = 2;
  required StatusCode status_code = 3 [(nanopb).int_size = IS_8];
}

message PingMessage {
  required Header header = 1;
}

message SystemTick {
  required Header header = 1;
  required uint32 tick = 2;
}

message ConsoleMessage {
  required Header header = 1;
  required uint32 this_frame = 2 [(nanopb).int_size = IS_8];
  required uint32 total_frames = 3 [(nanopb).int_size = IS_8];
  required bytes data = 4 [(nanopb).max_size = 128];
}

message SystemInfoMessage {
  required Header header = 1;
  required uint32 systemTick = 2;
  required string swVersion = 3 [(nanopb).max_size = 16, (nanopb).fixed_length = true];
  required string description = 4 [(nanopb).max_size = 16, (nanopb).fixed_length = true];
  required string serialNumber = 5 [(nanopb).max_size = 16, (nanopb).fixed_length = true];
}

message ParamIOMessage {
  required Header header = 1;
  optional ParamId id = 2 [(nanopb).int_size = IS_16];
  optional ParamType type = 3 [(nanopb).int_size = IS_8];
  optional bytes data = 4 [(nanopb).max_size = 64 ];
}

message SystemControlMessage {
  required Header header = 1;
}

message SwitchModeMessage {
  required Header header = 1;
  required BootMode mode = 2 [(nanopb).int_size = IS_8];
}
