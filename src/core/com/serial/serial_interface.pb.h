/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7-dev */

#ifndef PB_SRC_CORE_COM_SERIAL_SERIAL_INTERFACE_PB_H_INCLUDED
#define PB_SRC_CORE_COM_SERIAL_SERIAL_INTERFACE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _MsgId {
    MsgId_MSG_ACK_NACK = 0, /* Generic ack/nack type message */
    MsgId_MSG_PING_CMD = 1, /* Simple PING to see if the node is alive */
    MsgId_MSG_TERMINAL = 2, /* Terminal command for printing text/debug data */
    MsgId_MSG_SYS_TICK = 3, /* System time tick */
    MsgId_MSG_SYS_INFO = 4, /* System information */
    MsgId_MSG_PARAM_IO = 5 /* Do operations on configurable parameters */
} MsgId;

typedef enum _SubId {
    /* option allow_alias = true; */
    SubId_SUB_MSG_PARAM_IO_GET = 0, /* Retrieve the current value of a parameter */
    SubId_SUB_MSG_PARAM_IO_PUT = 1, /* Commit a new value of a parameter */
    SubId_SUB_MSG_PARAM_IO_SYNC = 2, /* Synchronize all parameters to disk */
    SubId_SUB_MSG_PARAM_IO_LOAD = 3 /* Load all parameters from disk */
} SubId;

typedef enum _ParamId {
    ParamId_PARAM_BOOT_COUNT = 0
} ParamId;

typedef enum _ParamType {
    ParamType_PARAM_TYPE_UINT8 = 0,
    ParamType_PARAM_TYPE_UINT16 = 1,
    ParamType_PARAM_TYPE_UINT32 = 2,
    ParamType_PARAM_TYPE_FLOAT = 3,
    ParamType_PARAM_TYPE_BYTES = 4
} ParamType;

/* Struct definitions */
/* Instrumentation message header common to all types. Each functional message type **must**
 have this first in their list of declarations. */
typedef struct _Header {
    uint8_t msgId; /* Root message identifier */
    uint8_t subId; /* Possible sub-identifier to specify root ID details */
    uint16_t uuid; /* Unique ID for the message */
} Header;

/* Root type that parsers can use to peek at messages */
typedef struct _BaseMessage {
    Header header;
} BaseMessage;

/* Generic ACK or NACK to a previous message */
typedef struct _AckNackMessage {
    Header header;
    bool acknowledge;
} AckNackMessage;

typedef struct _PingMessage {
    Header header;
} PingMessage;

typedef struct _SystemTick {
    Header header;
    uint32_t tick;
} SystemTick;

typedef PB_BYTES_ARRAY_T(128) ConsoleMessage_data_t;
typedef struct _ConsoleMessage {
    Header header;
    uint8_t this_frame;
    uint8_t total_frames;
    ConsoleMessage_data_t data;
} ConsoleMessage;

typedef struct _SystemInfoMessage {
    Header header;
    uint32_t systemTick;
    char swVersion[16];
    char description[16];
    char serialNumber[16];
} SystemInfoMessage;

typedef PB_BYTES_ARRAY_T(64) ParamData_as_bytes_t;
typedef struct _ParamData {
    pb_size_t which_DataField;
    union {
        char as_string[64];
        ParamData_as_bytes_t as_bytes;
        float as_float;
        double as_double;
        int8_t as_int8;
        int16_t as_int16;
        int32_t as_int32;
        uint8_t as_uint8;
        uint16_t as_uint16;
        uint32_t as_uint32;
        bool as_bool;
    } DataField;
} ParamData;

typedef struct _ParamIOMessage {
    Header header;
    ParamId id;
    bool has_type;
    ParamType type;
    bool has_data;
    ParamData data;
} ParamIOMessage;


/* Helper constants for enums */
#define _MsgId_MIN MsgId_MSG_ACK_NACK
#define _MsgId_MAX MsgId_MSG_PARAM_IO
#define _MsgId_ARRAYSIZE ((MsgId)(MsgId_MSG_PARAM_IO+1))

#define _SubId_MIN SubId_SUB_MSG_PARAM_IO_GET
#define _SubId_MAX SubId_SUB_MSG_PARAM_IO_LOAD
#define _SubId_ARRAYSIZE ((SubId)(SubId_SUB_MSG_PARAM_IO_LOAD+1))

#define _ParamId_MIN ParamId_PARAM_BOOT_COUNT
#define _ParamId_MAX ParamId_PARAM_BOOT_COUNT
#define _ParamId_ARRAYSIZE ((ParamId)(ParamId_PARAM_BOOT_COUNT+1))

#define _ParamType_MIN ParamType_PARAM_TYPE_UINT8
#define _ParamType_MAX ParamType_PARAM_TYPE_BYTES
#define _ParamType_ARRAYSIZE ((ParamType)(ParamType_PARAM_TYPE_BYTES+1))









#define ParamIOMessage_id_ENUMTYPE ParamId
#define ParamIOMessage_type_ENUMTYPE ParamType


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Header_init_default                      {0, 0, 0}
#define BaseMessage_init_default                 {Header_init_default}
#define AckNackMessage_init_default              {Header_init_default, 0}
#define PingMessage_init_default                 {Header_init_default}
#define SystemTick_init_default                  {Header_init_default, 0}
#define ConsoleMessage_init_default              {Header_init_default, 0, 0, {0, {0}}}
#define SystemInfoMessage_init_default           {Header_init_default, 0, "", "", ""}
#define ParamData_init_default                   {0, {""}}
#define ParamIOMessage_init_default              {Header_init_default, _ParamId_MIN, false, _ParamType_MIN, false, ParamData_init_default}
#define Header_init_zero                         {0, 0, 0}
#define BaseMessage_init_zero                    {Header_init_zero}
#define AckNackMessage_init_zero                 {Header_init_zero, 0}
#define PingMessage_init_zero                    {Header_init_zero}
#define SystemTick_init_zero                     {Header_init_zero, 0}
#define ConsoleMessage_init_zero                 {Header_init_zero, 0, 0, {0, {0}}}
#define SystemInfoMessage_init_zero              {Header_init_zero, 0, "", "", ""}
#define ParamData_init_zero                      {0, {""}}
#define ParamIOMessage_init_zero                 {Header_init_zero, _ParamId_MIN, false, _ParamType_MIN, false, ParamData_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Header_msgId_tag                         1
#define Header_subId_tag                         2
#define Header_uuid_tag                          3
#define BaseMessage_header_tag                   1
#define AckNackMessage_header_tag                1
#define AckNackMessage_acknowledge_tag           2
#define PingMessage_header_tag                   1
#define SystemTick_header_tag                    1
#define SystemTick_tick_tag                      2
#define ConsoleMessage_header_tag                1
#define ConsoleMessage_this_frame_tag            2
#define ConsoleMessage_total_frames_tag          3
#define ConsoleMessage_data_tag                  4
#define SystemInfoMessage_header_tag             1
#define SystemInfoMessage_systemTick_tag         2
#define SystemInfoMessage_swVersion_tag          3
#define SystemInfoMessage_description_tag        4
#define SystemInfoMessage_serialNumber_tag       5
#define ParamData_as_string_tag                  1
#define ParamData_as_bytes_tag                   2
#define ParamData_as_float_tag                   3
#define ParamData_as_double_tag                  4
#define ParamData_as_int8_tag                    5
#define ParamData_as_int16_tag                   6
#define ParamData_as_int32_tag                   7
#define ParamData_as_uint8_tag                   8
#define ParamData_as_uint16_tag                  9
#define ParamData_as_uint32_tag                  10
#define ParamData_as_bool_tag                    11
#define ParamIOMessage_header_tag                1
#define ParamIOMessage_id_tag                    2
#define ParamIOMessage_type_tag                  3
#define ParamIOMessage_data_tag                  4

/* Struct field encoding specification for nanopb */
#define Header_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   msgId,             1) \
X(a, STATIC,   REQUIRED, UINT32,   subId,             2) \
X(a, STATIC,   REQUIRED, UINT32,   uuid,              3)
#define Header_CALLBACK NULL
#define Header_DEFAULT NULL

#define BaseMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1)
#define BaseMessage_CALLBACK NULL
#define BaseMessage_DEFAULT NULL
#define BaseMessage_header_MSGTYPE Header

#define AckNackMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, BOOL,     acknowledge,       2)
#define AckNackMessage_CALLBACK NULL
#define AckNackMessage_DEFAULT NULL
#define AckNackMessage_header_MSGTYPE Header

#define PingMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1)
#define PingMessage_CALLBACK NULL
#define PingMessage_DEFAULT NULL
#define PingMessage_header_MSGTYPE Header

#define SystemTick_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, UINT32,   tick,              2)
#define SystemTick_CALLBACK NULL
#define SystemTick_DEFAULT NULL
#define SystemTick_header_MSGTYPE Header

#define ConsoleMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, UINT32,   this_frame,        2) \
X(a, STATIC,   REQUIRED, UINT32,   total_frames,      3) \
X(a, STATIC,   REQUIRED, BYTES,    data,              4)
#define ConsoleMessage_CALLBACK NULL
#define ConsoleMessage_DEFAULT NULL
#define ConsoleMessage_header_MSGTYPE Header

#define SystemInfoMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, UINT32,   systemTick,        2) \
X(a, STATIC,   REQUIRED, STRING,   swVersion,         3) \
X(a, STATIC,   REQUIRED, STRING,   description,       4) \
X(a, STATIC,   REQUIRED, STRING,   serialNumber,      5)
#define SystemInfoMessage_CALLBACK NULL
#define SystemInfoMessage_DEFAULT NULL
#define SystemInfoMessage_header_MSGTYPE Header

#define ParamData_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    STRING,   (DataField,as_string,DataField.as_string),   1) \
X(a, STATIC,   ONEOF,    BYTES,    (DataField,as_bytes,DataField.as_bytes),   2) \
X(a, STATIC,   ONEOF,    FLOAT,    (DataField,as_float,DataField.as_float),   3) \
X(a, STATIC,   ONEOF,    DOUBLE,   (DataField,as_double,DataField.as_double),   4) \
X(a, STATIC,   ONEOF,    INT32,    (DataField,as_int8,DataField.as_int8),   5) \
X(a, STATIC,   ONEOF,    INT32,    (DataField,as_int16,DataField.as_int16),   6) \
X(a, STATIC,   ONEOF,    INT32,    (DataField,as_int32,DataField.as_int32),   7) \
X(a, STATIC,   ONEOF,    UINT32,   (DataField,as_uint8,DataField.as_uint8),   8) \
X(a, STATIC,   ONEOF,    UINT32,   (DataField,as_uint16,DataField.as_uint16),   9) \
X(a, STATIC,   ONEOF,    UINT32,   (DataField,as_uint32,DataField.as_uint32),  10) \
X(a, STATIC,   ONEOF,    BOOL,     (DataField,as_bool,DataField.as_bool),  11)
#define ParamData_CALLBACK NULL
#define ParamData_DEFAULT NULL

#define ParamIOMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, UENUM,    id,                2) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  data,              4)
#define ParamIOMessage_CALLBACK NULL
#define ParamIOMessage_DEFAULT NULL
#define ParamIOMessage_header_MSGTYPE Header
#define ParamIOMessage_data_MSGTYPE ParamData

extern const pb_msgdesc_t Header_msg;
extern const pb_msgdesc_t BaseMessage_msg;
extern const pb_msgdesc_t AckNackMessage_msg;
extern const pb_msgdesc_t PingMessage_msg;
extern const pb_msgdesc_t SystemTick_msg;
extern const pb_msgdesc_t ConsoleMessage_msg;
extern const pb_msgdesc_t SystemInfoMessage_msg;
extern const pb_msgdesc_t ParamData_msg;
extern const pb_msgdesc_t ParamIOMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Header_fields &Header_msg
#define BaseMessage_fields &BaseMessage_msg
#define AckNackMessage_fields &AckNackMessage_msg
#define PingMessage_fields &PingMessage_msg
#define SystemTick_fields &SystemTick_msg
#define ConsoleMessage_fields &ConsoleMessage_msg
#define SystemInfoMessage_fields &SystemInfoMessage_msg
#define ParamData_fields &ParamData_msg
#define ParamIOMessage_fields &ParamIOMessage_msg

/* Maximum encoded size of messages (where known) */
#define AckNackMessage_size                      14
#define BaseMessage_size                         12
#define ConsoleMessage_size                      149
#define Header_size                              10
#define ParamData_size                           66
#define ParamIOMessage_size                      84
#define PingMessage_size                         12
#define SystemInfoMessage_size                   69
#define SystemTick_size                          18

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
